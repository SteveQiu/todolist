"use strict";var ApplicationConfiguration=function(){var applicationModuleName="checklist",applicationModuleVendorDependencies=["ngResource","ngRoute","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ui.sortable","btford.socket-io"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("checklists"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("teams"),ApplicationConfiguration.registerModule("templates"),ApplicationConfiguration.registerModule("users"),angular.module("checklists").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Checklists","checklists","dropdown","/checklists(/create)?"),Menus.addSubMenuItem("topbar","checklists","List Checklists","checklists")}]),angular.module("checklists").config(["$stateProvider",function($stateProvider){$stateProvider.state("listChecklists",{url:"/checklists",templateUrl:"modules/checklists/views/list-checklists.client.view.html"}).state("createChecklist",{url:"/checklists/create",templateUrl:"modules/checklists/views/create-checklist.client.view.html"}).state("instantiateChecklist",{url:"/checklists/create/:templateId",templateUrl:"modules/checklists/views/findTemplate.html"}).state("viewChecklist",{url:"/checklists/:checklistId",templateUrl:"modules/checklists/views/view-checklist.client.view.html"}).state("editChecklist",{url:"/checklists/:checklistId/edit",templateUrl:"modules/checklists/views/edit-checklist.client.view.html"})}]).run(["$rootScope","$location","Authentication",function($rootScope,$location,Authentication){$rootScope.$on("$locationChangeStart",function(){""===Authentication.user&&$location.url().match("/checklists")&&$location.path("/signin")})}]),angular.module("checklists").controller("ChecklistsController",["$scope","$stateParams","$location","$http","Socket","Authentication","Checklists",function($scope,$stateParams,$location,$http,Socket,Authentication,Checklists){$scope.authentication=Authentication,$scope.taskList=[],$scope.taskInput="",$scope.templateId=$stateParams.templateId,$scope.create=function(){var checklist=new Checklists({name:this.name});checklist.$save(function(response){$location.path("checklists/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(checklist){if(checklist){checklist.$remove();for(var i in $scope.checklists)$scope.checklists[i]===checklist&&$scope.checklists.splice(i,1)}else $scope.checklist.$remove(function(){$location.path("checklists")})},$scope.update=function(){var checklist=$scope.checklist;checklist.$update(function(){$location.path("checklists/"+checklist._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.checklists=Checklists.query()},$scope.findOne=function(){$scope.checklist=Checklists.get({checklistId:$stateParams.checklistId})},$scope.findTemplate=function(){$http.get("/templates/"+$scope.templateId).success(function(data){$scope.template=data;var checklist=new Checklists({name:$scope.template.name,taskList:$scope.template.taskList});$scope.checklist=checklist,checklist.$save(function(response){$location.path("checklists/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})}).error(function(){alert("Template does not exist!")})},$scope.percentage=function(){var numDone=0;if(void 0!==$scope.checklist.taskList){for(var i=$scope.checklist.taskList.length-1;i>=0;i--)$scope.checklist.taskList[i].isDone===!0&&numDone++;return Math.round(100*numDone/$scope.checklist.taskList.length)}return 0},Socket.on("checklist.updated",function(checklist){for(var i=$scope.checklist.taskList.length-1;i>=0;i--)$scope.checklist.taskList[i].isDone=checklist.taskList[i].isDone})}]),angular.module("checklists").factory("Checklists",["$resource",function($resource){return $resource("checklists/:checklistId",{checklistId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.navTab=0,$scope.pageUrl="welcome.html",$scope.setTab=function(num){$scope.navTab=num},$scope.setPage=function(pageUrl){$scope.pageUrl=pageUrl}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("Socket",["socketFactory",function(socketFactory){return socketFactory({prefix:"",ioSocket:io.connect("http://localhost:3000")})}]),angular.module("teams").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Teams","teams","dropdown","/teams(/create)?"),Menus.addSubMenuItem("topbar","teams","List Teams","teams"),Menus.addSubMenuItem("topbar","teams","New Team","teams/create")}]),angular.module("teams").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTeams",{url:"/teams",templateUrl:"modules/teams/views/list-teams.client.view.html"}).state("createTeam",{url:"/teams/create",templateUrl:"modules/teams/views/create-team.client.view.html"}).state("viewTeam",{url:"/teams/:teamId",templateUrl:"modules/teams/views/view-team.client.view.html"}).state("editTeam",{url:"/teams/:teamId/edit",templateUrl:"modules/teams/views/edit-team.client.view.html"})}]),angular.module("teams").controller("TeamsController",["$scope","$stateParams","$location","Authentication","Teams",function($scope,$stateParams,$location,Authentication,Teams){$scope.authentication=Authentication,$scope.create=function(){var team=new Teams({name:this.name});team.$save(function(response){$location.path("teams/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(team){if(team){team.$remove();for(var i in $scope.teams)$scope.teams[i]===team&&$scope.teams.splice(i,1)}else $scope.team.$remove(function(){$location.path("teams")})},$scope.update=function(){var team=$scope.team;team.$update(function(){$location.path("teams/"+team._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.teams=Teams.query()},$scope.findOne=function(){$scope.team=Teams.get({teamId:$stateParams.teamId})}}]),angular.module("teams").factory("Teams",["$resource",function($resource){return $resource("teams/:teamId",{teamId:"@_id"},{update:{method:"PUT"}})}]),angular.module("templates").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Templates","templates","dropdown","/templates(/create)?"),Menus.addSubMenuItem("topbar","templates","List Templates","templates"),Menus.addSubMenuItem("topbar","templates","New Template","templates/create")}]),angular.module("templates").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTemplates",{url:"/templates",templateUrl:"modules/templates/views/list-templates.client.view.html"}).state("createTemplate",{url:"/templates/create",templateUrl:"modules/templates/views/create-template.client.view.html"}).state("viewTemplate",{url:"/templates/:templateId",templateUrl:"modules/templates/views/view-template.client.view.html"}).state("editTemplate",{url:"/templates/:templateId/edit",templateUrl:"modules/templates/views/edit-template.client.view.html"})}]).run(["$rootScope","$location","Authentication",function($rootScope,$location,Authentication){$rootScope.$on("$locationChangeStart",function(){""===Authentication.user&&$location.url().match("/templates")&&$location.path("/signin")})}]),angular.module("templates").controller("TemplatesController",["$scope","$stateParams","$location","Authentication","Templates",function($scope,$stateParams,$location,Authentication,Templates){$scope.authentication=Authentication,$scope.taskList=[],$scope.taskInput="",$scope.create=function(templateCopy){var template;template=new Templates(templateCopy?{name:templateCopy.name+" Copy",taskList:templateCopy.taskList}:{name:this.name,taskList:this.taskList}),template.$save(function(response){$location.path("templates/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.addTask=function(template){if(""!==$scope.taskInput){var newTask={name:$scope.taskInput,isDone:!1};template?template.push(newTask):$scope.taskList.push(newTask),$scope.taskInput=""}},$scope.taskListSortable={containment:"parent",cursor:"move",tolerance:"pointer"},$scope.deleteTask=function(index,taskList){taskList?taskList.splice(index,1):this.taskList.splice(index,1)},$scope.remove=function(template){if(template){template.$remove();for(var i in $scope.templates)$scope.templates[i]===template&&$scope.templates.splice(i,1)}else $scope.template.$remove(function(){$location.path("templates")})},$scope.update=function(){var template=$scope.template;template.$update(function(){$location.path("templates/"+template._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.templates=Templates.query()},$scope.findOne=function(){$scope.template=Templates.get({templateId:$stateParams.templateId}),$scope.taskList=$scope.template.taskList},$scope.checkCreator=function(){return $scope.template.user._id===$scope.authentication.user._id}}]),angular.module("templates").factory("Templates",["$resource",function($resource){return $resource("templates/:templateId",{templateId:"@_id"},{update:{method:"PUT"}})}]).directive("editInPlace",function(){return{restrict:"E",scope:{value:"="},template:'<span ng-click="edit()" ng-bind="value"></span><input ng-model="value"></input>',link:function($scope,element){var inputElement=angular.element(element.children()[1]);element.addClass("edit-in-place"),$scope.editing=!1,$scope.edit=function(){$scope.editing=!0,element.addClass("active"),inputElement[0].focus()},inputElement.on("blur",function(){$scope.editing=!1,element.removeClass("active")})}}}).directive("ngEnter",function(){return function(scope,elem,attrs){elem.keyup(function(e){13===e.keyCode&&scope.$apply(function(){scope.$eval(attrs.ngEnter)})})}}),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);